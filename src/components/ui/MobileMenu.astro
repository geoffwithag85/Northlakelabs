---
// Mobile Menu Component - Best Practice Implementation
---

<!-- Mobile Menu Button -->
<button 
  id="mobile-menu-toggle"
  class="md:hidden relative z-50 p-2 text-gray-300 hover:text-burnt-sienna transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-burnt-sienna/50 focus:ring-offset-2 focus:ring-offset-black-pearl rounded-lg"
  aria-expanded="false"
  aria-controls="mobile-menu"
  aria-label="Toggle navigation menu"
>
  <!-- Animated Hamburger Icon -->
  <div class="w-6 h-6 relative">
    <span 
      class="mobile-menu-line absolute left-0 top-1 w-6 h-0.5 bg-current transform transition-all duration-300 ease-in-out"
    ></span>
    <span 
      class="mobile-menu-line absolute left-0 top-3 w-6 h-0.5 bg-current transform transition-all duration-300 ease-in-out"
    ></span>
    <span 
      class="mobile-menu-line absolute left-0 top-5 w-6 h-0.5 bg-current transform transition-all duration-300 ease-in-out"
    ></span>
  </div>
</button>

<!-- Mobile Menu Overlay -->
<div 
  id="mobile-menu-overlay"
  class="md:hidden fixed inset-0 bg-black/80 backdrop-blur-sm z-40 opacity-0 pointer-events-none transition-opacity duration-300 ease-in-out"
  aria-hidden="true"
></div>

<!-- Mobile Menu Panel -->
<nav 
  id="mobile-menu"
  class="md:hidden fixed top-0 right-0 h-full w-80 max-w-[85vw] bg-gradient-to-b from-black-pearl via-black-pearl/95 to-black-pearl/90 backdrop-blur-xl border-l border-gray-700/50 shadow-2xl z-50 transform translate-x-full transition-transform duration-300 ease-in-out"
  aria-hidden="true"
  role="dialog"
  aria-modal="true"
  aria-labelledby="mobile-menu-title"
>
  <!-- Menu Header -->
  <div class="flex items-center justify-between p-6 border-b border-gray-700/50">
    <h2 id="mobile-menu-title" class="text-lg font-semibold bg-gradient-to-r from-burnt-sienna via-royal-purple to-indigo bg-clip-text text-transparent">
      Navigation
    </h2>
    <button 
      id="mobile-menu-close"
      class="p-2 text-gray-400 hover:text-burnt-sienna transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-burnt-sienna/50 focus:ring-offset-2 focus:ring-offset-black-pearl rounded-lg"
      aria-label="Close navigation menu"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
  </div>

  <!-- Menu Items -->
  <div class="flex flex-col p-6 space-y-2">
    <a 
      href="/" 
      class="mobile-menu-link group flex items-center px-4 py-3 text-lg font-medium text-gray-300 hover:text-white hover:bg-burnt-sienna/10 rounded-lg transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-burnt-sienna/50 focus:ring-offset-2 focus:ring-offset-black-pearl"
    >
      <span class="mr-3 text-burnt-sienna group-hover:scale-110 transition-transform duration-300">üè†</span>
      Home
      <svg class="ml-auto w-5 h-5 text-gray-500 group-hover:text-burnt-sienna group-hover:translate-x-1 transition-all duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
      </svg>
    </a>
    
    <a 
      href="/about/" 
      class="mobile-menu-link group flex items-center px-4 py-3 text-lg font-medium text-gray-300 hover:text-white hover:bg-burnt-sienna/10 rounded-lg transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-burnt-sienna/50 focus:ring-offset-2 focus:ring-offset-black-pearl"
    >
      <span class="mr-3 text-burnt-sienna group-hover:scale-110 transition-transform duration-300">üë®‚Äçüî¨</span>
      About
      <svg class="ml-auto w-5 h-5 text-gray-500 group-hover:text-burnt-sienna group-hover:translate-x-1 transition-all duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
      </svg>
    </a>
    
    <a 
      href="/solutions/" 
      class="mobile-menu-link group flex items-center px-4 py-3 text-lg font-medium text-gray-300 hover:text-white hover:bg-burnt-sienna/10 rounded-lg transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-burnt-sienna/50 focus:ring-offset-2 focus:ring-offset-black-pearl"
    >
      <span class="mr-3 text-burnt-sienna group-hover:scale-110 transition-transform duration-300">‚ö°</span>
      Solutions
      <svg class="ml-auto w-5 h-5 text-gray-500 group-hover:text-burnt-sienna group-hover:translate-x-1 transition-all duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
      </svg>
    </a>
    
    <a 
      href="/contact/" 
      class="mobile-menu-link group flex items-center px-4 py-3 text-lg font-medium text-gray-300 hover:text-white hover:bg-burnt-sienna/10 rounded-lg transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-burnt-sienna/50 focus:ring-offset-2 focus:ring-offset-black-pearl"
    >
      <span class="mr-3 text-burnt-sienna group-hover:scale-110 transition-transform duration-300">üìß</span>
      Contact
      <svg class="ml-auto w-5 h-5 text-gray-500 group-hover:text-burnt-sienna group-hover:translate-x-1 transition-all duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
      </svg>
    </a>
  </div>

  <!-- Menu Footer -->
  <div class="absolute bottom-0 left-0 right-0 p-6 border-t border-gray-700/50">
    <div class="text-center">
      <p class="text-sm text-gray-500">Northlake Labs</p>
      <p class="text-xs text-gray-600 mt-1">AI-Powered Biomechanics</p>
    </div>
  </div>
</nav>

<style>
  /* Mobile menu animations */
  .mobile-menu-open #mobile-menu-toggle .mobile-menu-line:nth-child(1) {
    transform: rotate(45deg) translate(5px, 5px);
  }
  
  .mobile-menu-open #mobile-menu-toggle .mobile-menu-line:nth-child(2) {
    opacity: 0;
  }
  
  .mobile-menu-open #mobile-menu-toggle .mobile-menu-line:nth-child(3) {
    transform: rotate(-45deg) translate(7px, -6px);
  }

  /* Menu panel states */
  .mobile-menu-open #mobile-menu {
    transform: translateX(0);
  }
  
  .mobile-menu-open #mobile-menu-overlay {
    opacity: 1;
    pointer-events: auto;
  }

  /* Focus trap styles */
  .mobile-menu-open body {
    overflow: hidden;
  }

  /* Smooth focus indicator */
  .mobile-menu-link:focus {
    box-shadow: 0 0 0 2px rgba(235, 91, 72, 0.5);
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    * {
      transition-duration: 0.01ms !important;
      animation-duration: 0.01ms !important;
    }
  }
</style>

<script>
  class MobileMenu {
    private isOpen = false;
    private elements: {
      toggle: HTMLElement | null;
      menu: HTMLElement | null;
      overlay: HTMLElement | null;
      close: HTMLElement | null;
      links: NodeListOf<HTMLElement>;
    };
    private focusableElements: HTMLElement[] = [];
    private lastFocusedElement: HTMLElement | null = null;

    constructor() {
      this.elements = {
        toggle: document.getElementById('mobile-menu-toggle'),
        menu: document.getElementById('mobile-menu'),
        overlay: document.getElementById('mobile-menu-overlay'),
        close: document.getElementById('mobile-menu-close'),
        links: document.querySelectorAll('.mobile-menu-link')
      };

      this.init();
    }

    private init(): void {
      this.bindEvents();
      this.updateFocusableElements();
    }

    private bindEvents(): void {
      // Toggle button
      this.elements.toggle?.addEventListener('click', () => this.toggle());
      
      // Close button
      this.elements.close?.addEventListener('click', () => this.close());
      
      // Overlay click
      this.elements.overlay?.addEventListener('click', () => this.close());
      
      // Menu links
      this.elements.links.forEach(link => {
        link.addEventListener('click', () => this.close());
      });

      // Keyboard events
      document.addEventListener('keydown', (e) => this.handleKeyDown(e));
      
      // Window resize
      window.addEventListener('resize', () => this.handleResize());
    }

    private updateFocusableElements(): void {
      if (!this.elements.menu) return;
      
      const focusableSelectors = [
        'button:not([disabled])',
        'a[href]',
        'input:not([disabled])',
        'select:not([disabled])',
        'textarea:not([disabled])',
        '[tabindex]:not([tabindex="-1"])'
      ];
      
      this.focusableElements = Array.from(
        this.elements.menu.querySelectorAll(focusableSelectors.join(', '))
      ) as HTMLElement[];
    }

    private toggle(): void {
      if (this.isOpen) {
        this.close();
      } else {
        this.open();
      }
    }

    private open(): void {
      if (this.isOpen) return;

      this.isOpen = true;
      this.lastFocusedElement = document.activeElement as HTMLElement;

      // Update DOM
      document.body.classList.add('mobile-menu-open');
      this.elements.toggle?.setAttribute('aria-expanded', 'true');
      this.elements.menu?.setAttribute('aria-hidden', 'false');
      this.elements.overlay?.setAttribute('aria-hidden', 'false');

      // Focus management
      setTimeout(() => {
        this.elements.close?.focus();
      }, 100);

      // Trap focus
      this.trapFocus();
    }

    private close(): void {
      if (!this.isOpen) return;

      this.isOpen = false;

      // Update DOM
      document.body.classList.remove('mobile-menu-open');
      this.elements.toggle?.setAttribute('aria-expanded', 'false');
      this.elements.menu?.setAttribute('aria-hidden', 'true');
      this.elements.overlay?.setAttribute('aria-hidden', 'true');

      // Restore focus
      if (this.lastFocusedElement) {
        this.lastFocusedElement.focus();
        this.lastFocusedElement = null;
      }
    }

    private handleKeyDown(e: KeyboardEvent): void {
      if (!this.isOpen) return;

      switch (e.key) {
        case 'Escape':
          e.preventDefault();
          this.close();
          break;
        case 'Tab':
          this.handleTabKey(e);
          break;
      }
    }

    private handleTabKey(e: KeyboardEvent): void {
      if (this.focusableElements.length === 0) return;

      const firstElement = this.focusableElements[0];
      const lastElement = this.focusableElements[this.focusableElements.length - 1];

      if (e.shiftKey) {
        // Shift + Tab
        if (document.activeElement === firstElement) {
          e.preventDefault();
          lastElement.focus();
        }
      } else {
        // Tab
        if (document.activeElement === lastElement) {
          e.preventDefault();
          firstElement.focus();
        }
      }
    }

    private trapFocus(): void {
      // Additional focus trap logic if needed
    }

    private handleResize(): void {
      if (window.innerWidth >= 768 && this.isOpen) {
        this.close();
      }
    }
  }

  // Initialize mobile menu when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new MobileMenu();
  });
</script>
